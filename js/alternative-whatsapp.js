// Integraci√≥n con CallMeBot (Opci√≥n gratuita pero limitada)
class CallMeBotService {
  constructor() {
    // IMPORTANTE: Cada terapeuta debe registrar su n√∫mero en CallMeBot
    // 1. Agregar +34 644 59 71 67 como contacto "CallMeBot"
    // 2. Enviar: "I allow callmebot to send me messages"
    // 3. Recibir√°n un API key personal

    this.apiKeys = {
      lorena: "123456", // ‚ö†Ô∏è REEMPLAZAR con API key real de Lorena
      betsabe: "9569005", // ‚ö†Ô∏è REEMPLAZAR con API key real de Betsab√©
    };

    this.phones = {
      lorena: "+5491123456789", // ‚ö†Ô∏è REEMPLAZAR con n√∫mero real de Lorena
      betsabe: "+5491151414220", // ‚ö†Ô∏è REEMPLAZAR con n√∫mero real de Betsab√©
    };
  }

  async sendNotification(reservationData) {
    const apiKey = this.apiKeys[reservationData.therapistId];
    const phone = this.phones[reservationData.therapistId];

    if (!apiKey || !phone) {
      console.error(
        "‚ùå CallMeBot: Configuraci√≥n faltante para terapeuta:",
        reservationData.therapistId
      );
      console.error("  - API Key:", apiKey ? "‚úì Configurado" : "‚ùå Faltante");
      console.error("  - Tel√©fono:", phone ? "‚úì Configurado" : "‚ùå Faltante");
      return false;
    }

    if (apiKey === "123456") {
      console.warn(
        "‚ö†Ô∏è CallMeBot: Usando API key de prueba para Lorena. Configura la clave real."
      );
    }

    const message = this.formatMessage(reservationData);
    const encodedMessage = encodeURIComponent(message);
    const url = `https://api.callmebot.com/whatsapp.php?phone=${phone}&text=${encodedMessage}&apikey=${apiKey}`;

    try {
      // Usar una imagen invisible para evitar CORS
      const img = new Image();
      img.onload = () => {
        // Mensaje enviado exitosamente
      };
      img.onerror = () => {
        // Mensaje enviado (error esperado por CORS)
      };
      img.src = url;

      return true;
    } catch (error) {
      console.error("‚ùå CallMeBot: Error inesperado:", error);
      return false;
    }
  }

  formatMessage(data) {
    // Asegurar que tenemos el nombre del servicio
    const serviceName = data.serviceName || data.serviceId || "Consulta";

    return `üåø *NUEVA RESERVA* - Espacio Shanti

üë§ *Cliente:* ${data.clientName}
üìû *Tel√©fono:* ${data.clientPhone}
üìÖ *Fecha:* ${data.date}
‚è∞ *Hora:* ${data.time}
üíÜ‚Äç‚ôÄÔ∏è *Servicio:* ${serviceName}

¬°Nueva cita agendada para ti!

_Este mensaje fue enviado autom√°ticamente._`;
  }
}

window.callMeBotService = new CallMeBotService();

// Funci√≥n de prueba integrada
window.testWhatsAppNotification = function () {
  // Datos de prueba para Betsab√© (tiene configuraci√≥n real)
  const testReservation = {
    clientName: "Fernando Russo (Prueba)",
    clientPhone: "+5491123456789",
    date: "15/01/2024",
    time: "14:00",
    serviceName: "Reiki - Prueba",
    therapistId: "betsabe", // Usando Betsab√© que ya est√° configurada
  };

  if (window.callMeBotService) {
    window.callMeBotService
      .sendNotification(testReservation)
      .then((result) => {
        if (result) {
          console.log(
            "‚úÖ ¬°Prueba exitosa! Betsab√© deber√≠a recibir el WhatsApp en 1-5 minutos."
          );
        } else {
          console.log(
            "‚ùå Prueba fall√≥. Revisa los logs anteriores para m√°s detalles."
          );
        }
      })
      .catch((error) => {
        console.error("‚ùå Error en la prueba:", error);
      });
  } else {
    console.error("‚ùå CallMeBotService no est√° disponible");
  }
};

// Funci√≥n para probar manualmente
window.testBetsabe = function () {
  const testData = {
    clientName: "Cliente de Prueba",
    clientPhone: "+5491155667788",
    date: new Date().toLocaleDateString("es-AR"),
    time: "15:30",
    serviceName: "Reiki Energ√©tico",
    therapistId: "betsabe",
  };

  return window.callMeBotService.sendNotification(testData);
};
